from ..config import np, Vector, ParameterName, ColorConfig, ZOrderConfig
from ..config import (
    CompositeFigure, PathStep, PathOperation, PathShape, Rectangle, ellipse_arc_obj,
    calculate_intersect_angle_between_ellipse, convert_theta_to_coordinate)


class OrganConfig(object):
    common_z_order = ZOrderConfig.default_patch_z_order
    z_order_increment = ZOrderConfig.z_order_increment
    ear2_z_order = common_z_order + z_order_increment

    infusion_color = ColorConfig.slightly_light_orange
    common_edge_width = 9.5
    infusion_rect_edge_width = common_edge_width - 1

    mice_config = {
        ParameterName.edge_width: common_edge_width,
        ParameterName.edge_color: ColorConfig.black_color,
        ParameterName.face_color: None,
        ParameterName.z_order: common_z_order
    }
    infusion_inner_color_config = {
        ParameterName.edge_width: None,
        ParameterName.face_color: infusion_color,
        ParameterName.z_order: common_z_order - z_order_increment
    }
    infusion_bottom_small_rect_config = {
        ParameterName.edge_width: infusion_rect_edge_width,
        ParameterName.edge_color: ColorConfig.black_color,
        ParameterName.face_color: infusion_color,
        ParameterName.z_order: common_z_order
    }


class Organ(PathShape):
    total_width = 1
    height_to_width_ratio = 1

    def __init__(self, **kwargs):
        path_step_list = self.path_step_generator()
        PathShape.__init__(self, path_step_list, **kwargs)

    def calculate_center(self, scale):
        return Vector(self.total_width, self.height_to_width_ratio) * scale / 2

    @staticmethod
    def _organ_path_step_generator(path_step_dict):
        path_step_list = []
        for each_path_step_list in path_step_dict.values():
            start_path_step = each_path_step_list[0]
            if start_path_step.path_operation == PathOperation.moveto:
                if len(path_step_list) == 0:
                    path_step_list.append(start_path_step)
            else:
                path_step_list.append(start_path_step)
            path_step_list.extend(each_path_step_list[1:])
        if path_step_list[-1].path_operation != PathOperation.closepoly:
            path_step_list.append(PathStep(PathOperation.closepoly))
        return path_step_list

    def flip_path(self, path_list, axis=ParameterName.horizontal):
        if axis == ParameterName.horizontal:
            multi_array = Vector(-1, 1)
            add_array = Vector(self.total_width, 0)
        elif axis == ParameterName.vertical:
            multi_array = Vector(1, -1)
            add_array = Vector(0, self.height_to_width_ratio)
        else:
            raise ValueError()
        new_path_list = []
        for each_path in path_list:
            new_vertex_list = [
                current_vertex * multi_array + add_array
                for current_vertex in each_path.vertex_list]
            new_path_list.append(PathStep(each_path.path_operation, *new_vertex_list))
        return new_path_list


class MiceBrain(Organ):
    total_width = 1
    height_to_width_ratio = 2.77122846 / 2

    def path_step_generator(self):
        half_vertices_array = np.array([
            [0.00000000e+00, 2.73931619e+00],
            [2.03099607e-03, 2.73933239e+00],
            [6.77858964e-02, 2.77046939e+00],
            [9.13050552e-02, 2.75547570e+00],
            [1.14824214e-01, 2.74048202e+00],
            [1.73094726e-01, 2.71077109e+00],
            [2.15966322e-01, 2.67398313e+00],
            [2.58837919e-01, 2.63719517e+00],
            [3.14325629e-01, 2.58615844e+00],
            [3.48538375e-01, 2.53474918e+00],
            [3.82751121e-01, 2.48333992e+00],
            [4.03779224e-01, 2.40872494e+00],
            [4.21239057e-01, 2.36552682e+00],
            [4.38702631e-01, 2.32232981e+00],
            [4.23378523e-01, 2.30840832e+00],
            [4.53312338e-01, 2.27556080e+00],
            [4.83249893e-01, 2.24271701e+00],
            [5.53814850e-01, 2.20879975e+00],
            [6.00856908e-01, 2.16846035e+00],
            [6.47897844e-01, 2.12811721e+00],
            [6.92800811e-01, 2.08705968e+00],
            [7.35566556e-01, 2.03350945e+00],
            [7.78331928e-01, 1.97995549e+00],
            [8.21454500e-01, 1.91426792e+00],
            [8.57448762e-01, 1.84715154e+00],
            [8.93443399e-01, 1.78003142e+00],
            [9.28012597e-01, 1.72469706e+00],
            [9.51532878e-01, 1.63080370e+00],
            [9.75053272e-01, 1.53691034e+00],
            [9.97149914e-01, 1.39374943e+00],
            [9.98574982e-01, 1.28379138e+00],
            [1.00000000e+00, 1.17383333e+00],
            [9.84675854e-01, 1.04888032e+00],
            [9.60085878e-01, 9.71051648e-01],
            [9.35496238e-01, 8.93222981e-01],
            [8.93086198e-01, 8.52344978e-01],
            [8.51033358e-01, 8.16823118e-01],
            [8.08980144e-01, 7.81301259e-01],
            [7.84925371e-01, 7.86833198e-01],
            [7.84747332e-01, 7.57916752e-01],
            [7.84569666e-01, 7.29000305e-01],
            [8.33568662e-01, 6.85982836e-01],
            [8.49962503e-01, 6.43316957e-01],
            [8.66355970e-01, 6.00654819e-01],
            [8.73306241e-01, 5.38890844e-01],
            [8.63863044e-01, 5.01940181e-01],
            [8.54419474e-01, 4.64993258e-01],
            [8.13077670e-01, 4.55354442e-01],
            [7.93299209e-01, 4.21616718e-01],
            [7.73520749e-01, 3.87878993e-01],
            [7.72985882e-01, 3.32720431e-01],
            [7.45188914e-01, 2.99521313e-01],
            [7.17391947e-01, 2.66318455e-01],
            [6.68211171e-01, 2.40076340e-01],
            [6.26515159e-01, 2.22403308e-01],
            [5.84818398e-01, 2.04730276e-01],
            [5.42051530e-01, 2.02590810e-01],
            [4.95009472e-01, 1.93486861e-01],
            [4.47967414e-01, 1.84382912e-01],
            [3.88630910e-01, 1.88130717e-01],
            [3.44263184e-01, 1.67783353e-01],
            [2.99895458e-01, 1.47432249e-01],
            [2.63008380e-01, 9.65600986e-02],
            [2.28795634e-01, 7.13877164e-02],
            [1.94582888e-01, 4.62190745e-02],
            [1.84959034e-01, 4.24750100e-02],
            [1.38986709e-01, 1.67677614e-02],
            [9.21915121e-02, 3.62811452e-06],
            [7.12120334e-02, 6.08913567e-03],
            [0.00000000e+00, 2.93978265e-03],
        ])
        width_offset = np.array([[self.total_width, 0]])
        right_vertices_array = half_vertices_array + width_offset
        left_vertices_array = half_vertices_array * np.array([[-1, 1]]) + width_offset
        inverted_left_vertices_array = np.flip(left_vertices_array[:-1], axis=0)
        height_normalize = np.array([[0.5, 0.5]])
        complete_vertices_array = np.vstack([right_vertices_array, inverted_left_vertices_array]) * height_normalize
        assert complete_vertices_array.shape[0] % 3 == 1
        step_num = complete_vertices_array.shape[0] // 3
        complete_path_list = [PathStep(PathOperation.moveto, Vector(array=complete_vertices_array[0]))]
        for step_index in range(step_num):
            complete_path_list.append(PathStep(
                PathOperation.curve4,
                complete_vertices_array[step_index * 3 + 1],
                complete_vertices_array[step_index * 3 + 2],
                complete_vertices_array[step_index * 3 + 3]))
        path_step_dict = {
            'brain': complete_path_list
        }
        return self._organ_path_step_generator(path_step_dict)


class Liver(Organ):
    total_width = 1
    height_to_width_ratio = 0.7

    def path_step_generator(self):
        complete_vertices_array = np.array([
            [0.33444134, 0.68124022],
            [0.30804469, 0.67857542],
            [0.27603352, 0.67511173],
            [0.24723464, 0.6692486],
            [0.21843575, 0.66338547],
            [0.19202514, 0.65832123],
            [0.16722067, 0.64686173],
            [0.1424162, 0.63540223],
            [0.11678771, 0.61594413],
            [0.09840782, 0.60049022],
            [0.0800419, 0.58503631],
            [0.0676676, 0.56952654],
            [0.05699721, 0.55413687],
            [0.04632682, 0.53874581],
            [0.03456704, 0.52040922],
            [0.02600559, 0.49854749],
            [0.01743017, 0.47668994],
            [0.00925978, 0.44731844],
            [0.00560056, 0.42300279],
            [0.00192737, 0.39868715],
            [0., 0.38621508],
            [0.00399441, 0.35263966],
            [0.00800279, 0.31906425],
            [0.02425978, 0.25297486],
            [0.02959497, 0.22152235],
            [0.03493017, 0.19006983],
            [0.03493017, 0.18261173],
            [0.03600559, 0.16395251],
            [0.03706704, 0.14530726],
            [0.03660615, 0.1275838],
            [0.03600559, 0.10959497],
            [0.03540503, 0.09160615],
            [0.03187151, 0.0725419],
            [0.03240223, 0.05601955],
            [0.03293296, 0.03949721],
            [0.02899441, 0.01857542],
            [0.03920391, 0.01044693],
            [0.04939944, 0.00231844],
            [0.07333799, 0.00139665],
            [0.09360335, 0.0072486],
            [0.11388268, 0.01311453],
            [0.14268156, 0.03230447],
            [0.16082402, 0.04562849],
            [0.17895251, 0.05895251],
            [0.19015363, 0.07227654],
            [0.20243017, 0.0872067],
            [0.21469274, 0.10212291],
            [0.22163408, 0.12085196],
            [0.23442737, 0.13518156],
            [0.24723464, 0.14949721],
            [0.25843575, 0.16356145],
            [0.27924581, 0.17315642],
            [0.3000419, 0.1827514],
            [0.33391061, 0.19134078],
            [0.35924581, 0.19273743],
            [0.38459497, 0.19413408],
            [0.40885475, 0.19886872],
            [0.43125698, 0.20312849],
            [0.45247207, 0.20886872],
            [0.47086592, 0.21865922],
            [0.48646648, 0.22712291],
            [0.50208101, 0.23558659],
            [0.51294693, 0.24244413],
            [0.5248743, 0.25389665],
            [0.53681564, 0.26536313],
            [0.54847765, 0.28335196],
            [0.55808659, 0.29587989],
            [0.56768156, 0.30840782],
            [0.57114525, 0.3223324],
            [0.58248603, 0.32905028],
            [0.59382682, 0.33578212],
            [0.6099581, 0.33291899],
            [0.62608939, 0.33625698],
            [0.64223464, 0.33958101],
            [0.66403631, 0.34284916],
            [0.67930168, 0.34905028],
            [0.69456704, 0.35523743],
            [0.70490223, 0.3627095],
            [0.7177095, 0.37343575],
            [0.73051676, 0.38416201],
            [0.74384078, 0.39821229],
            [0.75611732, 0.41340782],
            [0.76837989, 0.42858939],
            [0.77851955, 0.44885475],
            [0.79131285, 0.46456704],
            [0.80412011, 0.4802933],
            [0.81558659, 0.49469274],
            [0.83293296, 0.5077514],
            [0.85026536, 0.52080587],
            [0.87660615, 0.53226536],
            [0.8953352, 0.54292598],
            [0.91407821, 0.5535852],
            [0.93107542, 0.56198045],
            [0.94534916, 0.5717081],
            [0.95960894, 0.58143575],
            [0.97201117, 0.59149581],
            [0.98094972, 0.6012905],
            [0.98988827, 0.6110838],
            [0.99854749, 0.62181006],
            [0.99895251, 0.63047207],
            [0.99935754, 0.63913268],
            [0.99555866, 0.64572905],
            [0.98335196, 0.65325838],
            [0.97114525, 0.66078631],
            [0.94655028, 0.66978073],
            [0.92574022, 0.67564385],
            [0.90494413, 0.68150698],
            [0.8846648, 0.68523883],
            [0.85853352, 0.68843575],
            [0.83238827, 0.69163408],
            [0.79719274, 0.6948324],
            [0.76891061, 0.6948324],
            [0.74064246, 0.6948324],
            [0.7100419, 0.69123464],
            [0.68891061, 0.68843575],
            [0.66776536, 0.68563827],
            [0.65696927, 0.68243994],
            [0.64209497, 0.6780419],
            [0.62722067, 0.67364525],
            [0.61308659, 0.66638408],
            [0.59969274, 0.66205307],
            [0.58628492, 0.65772207],
            [0.57828212, 0.65086034],
            [0.56168994, 0.65205866],
            [0.5450838, 0.65325838],
            [0.52208101, 0.66478492],
            [0.50006983, 0.6692486],
            [0.47807263, 0.67371229],
            [0.44632682, 0.67657682],
            [0.4296648, 0.67884218],
            [0.41298883, 0.68110754],
            [0.39291899, 0.68124022],
            [0.38445531, 0.68163966],
            [0.37599162, 0.6820405],
            [0.33797486, 0.68150698],
            [0.33444134, 0.68124022],
        ])
        assert complete_vertices_array.shape[0] % 3 == 1
        step_num = complete_vertices_array.shape[0] // 3
        complete_path_list = [PathStep(PathOperation.moveto, Vector(array=complete_vertices_array[0]))]
        for step_index in range(step_num):
            complete_path_list.append(PathStep(
                PathOperation.curve4,
                complete_vertices_array[step_index * 3 + 1],
                complete_vertices_array[step_index * 3 + 2],
                complete_vertices_array[step_index * 3 + 3]))
        path_step_dict = {
            'liver': complete_path_list
        }
        return self._organ_path_step_generator(path_step_dict)


class Kidney(Organ):
    total_width = 1
    height_to_width_ratio = 1.7870873786407766

    def __init__(self, flip=False, **kwargs):
        self.flip = flip
        super().__init__(**kwargs)

    def path_step_generator(self):
        base_path_list = [
            PathStep(PathOperation.moveto, Vector(0.3695122950819672, 1.808016786557377)),
            PathStep(PathOperation.curve4, Vector(0.34816803278688524, 1.8078960569672131),
                     Vector(0.3238524590163935, 1.8071367704918033), Vector(0.29999999999999993, 1.8041897991803277)),
            PathStep(PathOperation.curve4, Vector(0.2761516393442623, 1.8012428278688524),
                     Vector(0.2490450819672131, 1.7970202049180328), Vector(0.22640983606557377, 1.7903349590163933)),
            PathStep(PathOperation.curve4, Vector(0.20377459016393445, 1.7836497540983607),
                     Vector(0.18403278688524588, 1.7745266803278688), Vector(0.1641844262295082, 1.7640754098360656)),
            PathStep(PathOperation.curve4, Vector(0.14433606557377046, 1.7536245901639345),
                     Vector(0.12313114754098366, 1.7401840163934426), Vector(0.10731967213114757, 1.7276266393442623)),
            PathStep(PathOperation.curve4, Vector(0.09150819672131148, 1.7150696721311474),
                     Vector(0.08088934426229506, 1.7029122950819673), Vector(0.06930737704918033, 1.6887327868852458)),
            PathStep(PathOperation.curve4, Vector(0.057725409836065604, 1.6745536885245902),
                     Vector(0.04791803278688528, 1.6610610655737705), Vector(0.03783196721311473, 1.6425504098360657)),
            PathStep(PathOperation.curve4, Vector(0.027745901639344303, 1.6240393442622951),
                     Vector(0.015024590163934414, 1.6013696721311474), Vector(0.00879098360655742, 1.5776676229508195)),
            PathStep(PathOperation.curve4, Vector(0.0025614754098360654, 1.5539651639344263),
                     Vector(-0.0013442622950819794, 1.528777868852459),
                     Vector(0.0004303278688524171, 1.5003364754098358)),
            PathStep(PathOperation.curve4, Vector(0.002200819672131173, 1.4718950819672132),
                     Vector(0.008278688524590206, 1.4369926229508196),
                     Vector(0.019434426229508157, 1.4070184426229508)),
            PathStep(PathOperation.curve4, Vector(0.030590163934426224, 1.3770450819672133),
                     Vector(0.04973770491803277, 1.346581967213115), Vector(0.06736885245901635, 1.3204918032786885)),
            PathStep(PathOperation.curve4, Vector(0.08500000000000003, 1.2944057377049178),
                     Vector(0.09948360655737705, 1.2745573770491803), Vector(0.12522131147540985, 1.2504959016393442)),
            PathStep(PathOperation.curve4, Vector(0.1509631147540984, 1.2264303278688526),
                     Vector(0.1919139344262295, 1.1984262295081967), Vector(0.22181147540983612, 1.1761065573770493)),
            PathStep(PathOperation.lineto, Vector(0.24255327868852455, 1.164450819672131)),
            PathStep(PathOperation.lineto, Vector(0.19937704918032786, 1.1481680327868853)),
            PathStep(PathOperation.curve4, Vector(0.174077868852459, 1.1355368852459018),
                     Vector(0.1665204918032787, 1.1256516393442622), Vector(0.15166803278688526, 1.1114467213114754)),
            PathStep(PathOperation.curve4, Vector(0.13681967213114749, 1.0972459016393443),
                     Vector(0.12177049180327865, 1.0796967213114754), Vector(0.11027459016393447, 1.0629549180327869)),
            PathStep(PathOperation.curve4, Vector(0.09877459016393442, 1.046217213114754),
                     Vector(0.09218852459016394, 1.0306311475409835), Vector(0.08267622950819672, 1.011)),
            PathStep(PathOperation.curve4, Vector(0.07316803278688529, 0.9913729508196721),
                     Vector(0.06086475409836065, 0.9668647540983606), Vector(0.05320901639344264, 0.9451926229508197)),
            PathStep(PathOperation.curve4, Vector(0.04555327868852463, 0.9235163934426229),
                     Vector(0.04192622950819668, 0.9071229508196721), Vector(0.03675000000000005, 0.880967213114754)),
            PathStep(PathOperation.curve4, Vector(0.03157377049180331, 0.8548073770491803),
                     Vector(0.0256106557377049, 0.8195409836065574), Vector(0.022163934426229454, 0.7882377049180327)),
            PathStep(PathOperation.curve4, Vector(0.01871311475409837, 0.7569303278688526),
                     Vector(0.01662704918032782, 0.72772131147541), Vector(0.016053278688524596, 0.6931311475409837)),
            PathStep(PathOperation.curve4, Vector(0.015475409836065617, 0.6585450819672132),
                     Vector(0.017385245901639305, 0.620672131147541), Vector(0.01871311475409837, 0.5807090163934427)),
            PathStep(PathOperation.curve4, Vector(0.02004508196721308, 0.5407418032786887),
                     Vector(0.021110655737704962, 0.4969549180327869), Vector(0.02403278688524592, 0.4533442622950821)),
            PathStep(PathOperation.curve4, Vector(0.026959016393442635, 0.4097336065573771),
                     Vector(0.030897540983606506, 0.36360245901639365),
                     Vector(0.036254098360655754, 0.3190532786885248)),
            PathStep(PathOperation.curve4, Vector(0.04161065573770489, 0.2745040983606559),
                     Vector(0.04984016393442624, 0.22525819672131156),
                     Vector(0.056163934426229536, 0.18605327868852478)),
            PathStep(PathOperation.curve4, Vector(0.06248770491803284, 0.14684426229508213),
                     Vector(0.06633196721311477, 0.12001639344262315), Vector(0.0742008196721311, 0.0838155737704919)),
            PathStep(PathOperation.curve4, Vector(0.08206967213114756, 0.047610655737704996),
                     Vector(0.09378278688524594, 0.030688524590163933),
                     Vector(0.10337295081967218, 0.01691803278688542)),
            PathStep(PathOperation.curve4, Vector(0.11296721311475406, 0.0031475409836066765),
                     Vector(0.12140983606557375, 0.002918032786885434),
                     Vector(0.13175819672131148, 0.0011844262295083775)),
            PathStep(PathOperation.curve4, Vector(0.14211065573770496, 0),
                     Vector(0.15556147540983603, 0.0021721311475411047),
                     Vector(0.16546721311475407, 0.006524590163934596)),
            PathStep(PathOperation.curve4, Vector(0.1753729508196721, 0.010881147540983727),
                     Vector(0.186327868852459, 0.018651639344262477), Vector(0.1911926229508197, 0.027307377049180372)),
            PathStep(PathOperation.curve4, Vector(0.19605327868852454, 0.03596721311475414),
                     Vector(0.19451229508196727, 0.04827049180327877), Vector(0.1946434426229508, 0.05848360655737721)),
            PathStep(PathOperation.curve4, Vector(0.19477459016393445, 0.06869262295081976),
                     Vector(0.19357377049180327, 0.07649590163934435),
                     Vector(0.19197950819672127, 0.08856967213114773)),
            PathStep(PathOperation.curve4, Vector(0.19038934426229515, 0.10064344262295088),
                     Vector(0.18751229508196715, 0.11387295081967223),
                     Vector(0.18508196721311473, 0.13092622950819682)),
            PathStep(PathOperation.curve4, Vector(0.18265163934426232, 0.14797950819672143),
                     Vector(0.18065983606557373, 0.17103688524590166), Vector(0.1773934426229508, 0.19089344262295094)),
            PathStep(PathOperation.curve4, Vector(0.17412295081967208, 0.2107540983606559),
                     Vector(0.16860655737704913, 0.2319139344262297), Vector(0.16546721311475407, 0.2500737704918034)),
            PathStep(PathOperation.curve4, Vector(0.1623319672131148, 0.2682336065573771),
                     Vector(0.16055737704918027, 0.2834754098360656), Vector(0.15856967213114756, 0.2998524590163936)),
            PathStep(PathOperation.curve4, Vector(0.1565819672131147, 0.31623360655737703),
                     Vector(0.15468852459016394, 0.33045081967213136),
                     Vector(0.15354098360655738, 0.34834426229508214)),
            PathStep(PathOperation.curve4, Vector(0.1537459016393443, 0.3696516393442625),
                     Vector(0.1512868852459016, 0.3909631147540985), Vector(0.1514959016393443, 0.4122704918032789)),
            PathStep(PathOperation.lineto, Vector(0.1654016393442623, 0.39027459016393456)),
            PathStep(PathOperation.curve4, Vector(0.17383196721311472, 0.37411065573770497),
                     Vector(0.1717786885245901, 0.3770204918032789), Vector(0.18501639344262297, 0.36328688524590186)),
            PathStep(PathOperation.curve4, Vector(0.19824999999999995, 0.3495532786885246),
                     Vector(0.2248770491803279, 0.32480327868852465), Vector(0.24480737704918035, 0.3078688524590164)),
            PathStep(PathOperation.curve4, Vector(0.2647377049180328, 0.2909344262295082),
                     Vector(0.2808360655737705, 0.27477049180327884), Vector(0.3045983606557377, 0.2616844262295082)),
            PathStep(PathOperation.curve4, Vector(0.3283647540983607, 0.24860245901639363),
                     Vector(0.353155737704918, 0.23628688524590186), Vector(0.38738934426229504, 0.22935655737704927)),
            PathStep(PathOperation.curve4, Vector(0.4216270491803279, 0.22243032786885256),
                     Vector(0.47322131147540986, 0.21781147540983611), Vector(0.510016393442623, 0.2201229508196723)),
            PathStep(PathOperation.curve4, Vector(0.5468114754098361, 0.22243032786885256),
                     Vector(0.5757090163934426, 0.23089754098360654), Vector(0.608163524590164, 0.24321311475409857)),
            PathStep(PathOperation.curve4, Vector(0.6406188524590164, 0.2555286885245904),
                     Vector(0.6756225409836065, 0.2755409836065575), Vector(0.7047520491803279, 0.29401229508196736)),
            PathStep(PathOperation.curve4, Vector(0.7338811475409837, 0.31248770491803285),
                     Vector(0.7607114754098361, 0.33327049180327883), Vector(0.7829426229508197, 0.35405327868852465)),
            PathStep(PathOperation.curve4, Vector(0.8051733606557377, 0.3748319672131148),
                     Vector(0.8197381147540983, 0.3933073770491805), Vector(0.8381356557377049, 0.4187090163934427)),
            PathStep(PathOperation.curve4, Vector(0.8565336065573771, 0.4441065573770493),
                     Vector(0.8764639344262295, 0.47489754098360654), Vector(0.8933290983606557, 0.5064549180327871)),
            PathStep(PathOperation.curve4, Vector(0.9101942622950819, 0.5380122950819674),
                     Vector(0.9278241803278688, 0.5795778688524591), Vector(0.9393233606557376, 0.6080573770491805)),
            PathStep(PathOperation.curve4, Vector(0.9508229508196722, 0.6365368852459017),
                     Vector(0.9554221311475409, 0.6527008196721312), Vector(0.9623207786885246, 0.6773319672131147)),
            PathStep(PathOperation.curve4, Vector(0.9692192213114754, 0.7019631147540986),
                     Vector(0.9753527868852458, 0.7265942622950822), Vector(0.9807185655737706, 0.7558401639344263)),
            PathStep(PathOperation.curve4, Vector(0.9860843442622951, 0.7850901639344262),
                     Vector(0.9914501229508196, 0.8266557377049181), Vector(0.9945168852459015, 0.8528237704918032)),
            PathStep(PathOperation.curve4, Vector(0.9975836639344262, 0.8789959016393443),
                     Vector(0.9983499959016393, 0.8851516393442623), Vector(0.9991163278688524, 0.9128647540983607)),
            PathStep(PathOperation.curve4, Vector(0.9998826598360656, 0.9405737704918032),
                     Vector(1.0006489918032786, 0.9813688524590164), Vector(0.9991163278688524, 1.0190819672131148)),
            PathStep(PathOperation.curve4, Vector(0.9975836639344262, 1.056799180327869),
                     Vector(0.9937505327868853, 1.10375), Vector(0.9899174590163935, 1.1391598360655737)),
            PathStep(PathOperation.curve4, Vector(0.9860843442622951, 1.1745655737704919),
                     Vector(0.9830175409836065, 1.2038155737704919), Vector(0.9761190983606557, 1.2315245901639342)),
            PathStep(PathOperation.lineto, Vector(0.9615327049180328, 1.2766188524590165)),
            PathStep(PathOperation.curve4, Vector(0.9583704918032787, 1.2893196721311475),
                     Vector(0.9532668032786886, 1.3088811475409834), Vector(0.949385655737705, 1.3222991803278688)),
            PathStep(PathOperation.lineto, Vector(0.9339069672131147, 1.3641147540983607)),
            PathStep(PathOperation.lineto, Vector(0.918913524590164, 1.4018225409836065)),
            PathStep(PathOperation.lineto, Vector(0.8972098360655737, 1.4469959016393443)),
            PathStep(PathOperation.curve4, Vector(0.8836983606557377, 1.4751372950819672),
                     Vector(0.8683196721311476, 1.5040020491803279), Vector(0.8519340163934426, 1.5270934426229508)),
            PathStep(PathOperation.curve4, Vector(0.8191627049180328, 1.5732762295081966),
                     Vector(0.8087643442622952, 1.5879717213114755), Vector(0.7863918032786885, 1.613685655737705)),
            PathStep(PathOperation.curve4, Vector(0.7640188524590165, 1.6393995901639344),
                     Vector(0.7412155737704919, 1.6621446721311477), Vector(0.7176926229508197, 1.6813758196721311)),
            PathStep(PathOperation.curve4, Vector(0.6941696721311476, 1.700606557377049),
                     Vector(0.668955737704918, 1.7154012295081968), Vector(0.6452516393442622, 1.7290741803278689)),
            PathStep(PathOperation.curve4, Vector(0.6215475409836065, 1.7427471311475409),
                     Vector(0.5996196721311475, 1.7524475409836064), Vector(0.57547131147541, 1.7634168032786885)),
            PathStep(PathOperation.lineto, Vector(0.5301024590163934, 1.7802504098360656)),
            PathStep(PathOperation.lineto, Vector(0.48424999999999996, 1.794454344262295)),
            PathStep(PathOperation.curve4, Vector(0.45286475409836063, 1.7972151229508198),
                     Vector(0.45106147540983604, 1.801065368852459), Vector(0.4280655737704918, 1.804914180327869)),
            PathStep(PathOperation.curve4, Vector(0.40273360655737706, 1.8076196885245903),
                     Vector(0.39085655737704916, 1.8081375163934428), Vector(0.3695122950819672, 1.808016786557377)),
            PathStep(PathOperation.closepoly),
        ]
        if self.flip:
            path_list = self.flip_path(base_path_list, ParameterName.horizontal)
        else:
            path_list = base_path_list

        path_step_dict = {
            'kidney': path_list
        }
        return self._organ_path_step_generator(path_step_dict)


class Heart(Organ):
    total_width = 1
    height_to_width_ratio = 2.77122846 / 2

    def path_step_generator(self):
        path_list = [
            PathStep(PathOperation.moveto, Vector(0.23345346869712352, 0.8938984771573604)),
            PathStep(PathOperation.curve4, Vector(0.2132098138747885, 0.8615922165820643),
                     Vector(0.17781895093062608, 0.8303147208121827), Vector(0.15202030456852791, 0.7989475465313028)),
            PathStep(PathOperation.curve4, Vector(0.1262216582064298, 0.7675820642978003),
                     Vector(0.09754991539763111, 0.7326362098138749), Vector(0.07866666666666665, 0.7056903553299492)),
            PathStep(PathOperation.curve4, Vector(0.05978172588832485, 0.6787428087986462),
                     Vector(0.0493891708967851, 0.661663282571912), Vector(0.03870896785109985, 0.637263959390863)),
            PathStep(PathOperation.curve4, Vector(0.02802876480541455, 0.6128646362098138),
                     Vector(0.019967851099830774, 0.588336717428088), Vector(0.014578680203045709, 0.5593011844331641)),
            PathStep(PathOperation.curve4, Vector(0.00918781725888326, 0.5302622673434856),
                     Vector(0.004401015228426394, 0.4964179357021997),
                     Vector(0.006370558375634495, 0.4630406091370559)),
            PathStep(PathOperation.curve4, Vector(0.008340101522842643, 0.4296632825719121),
                     Vector(0.01218612521150592, 0.3795786802030457), Vector(0.028697123519458557, 0.338077834179357)),
            PathStep(PathOperation.curve4, Vector(0.04520812182741115, 0.2965769881556684),
                     Vector(0.06891201353637902, 0.2521878172588833), Vector(0.10544162436548224, 0.21403045685279182)),
            PathStep(PathOperation.curve4, Vector(0.14197292724196278, 0.17587309644670057),
                     Vector(0.19264805414551606, 0.1390659898477157), Vector(0.24787478849407787, 0.10913874788494074)),
            PathStep(PathOperation.curve4, Vector(0.3031015228426396, 0.07921150592216576),
                     Vector(0.360994923857868, 0.051939086294416285), Vector(0.43681387478849404, 0.03445854483925551)),
            PathStep(PathOperation.curve4, Vector(0.5126345177664975, 0.01697800338409474),
                     Vector(0.6269526226734349, 0.003639593908629363), Vector(0.7028020304568527, 0.00424873096446695)),
            PathStep(PathOperation.curve4, Vector(0.7786497461928934, 0.004857868020304536),
                     Vector(0.8695668358714044, 0.02919120135363782), Vector(0.8919103214890017, 0.038125211505922234)),
            PathStep(PathOperation.curve4, Vector(0.9142554991539764, 0.04706091370558373),
                     Vector(0.9587512690355329, 0.07516751269035529), Vector(0.9758358714043994, 0.10872758037225048)),
            PathStep(PathOperation.curve4, Vector(0.9929187817258884, 0.14228934010152278),
                     Vector(0.9986903553299492, 0.18697292724196274), Vector(0.9944213197969543, 0.2394873096446701)),
            PathStep(PathOperation.curve4, Vector(0.9901522842639593, 0.292),
                     Vector(0.9706395939086295, 0.36637563451776656), Vector(0.9502165820642977, 0.42381218274111665)),
            PathStep(PathOperation.curve4, Vector(0.9297935702199662, 0.48124703891708975),
                     Vector(0.8984991539763114, 0.5427055837563453), Vector(0.8718764805414552, 0.5841015228426395)),
            PathStep(PathOperation.curve4, Vector(0.8452554991539764, 0.6254957698815566),
                     Vector(0.8168527918781726, 0.6484517766497462), Vector(0.7904873096446701, 0.672175972927242)),
            PathStep(PathOperation.curve4, Vector(0.7641235194585448, 0.6959001692047379),
                     Vector(0.7346514382402707, 0.7102081218274111), Vector(0.7136920473773266, 0.7264365482233501)),
            PathStep(PathOperation.curve4, Vector(0.6927309644670051, 0.7426649746192893),
                     Vector(0.672175972927242, 0.7550710659898476), Vector(0.6647241962774957, 0.7695532994923858)),
            PathStep(PathOperation.curve4, Vector(0.6572741116751268, 0.7840338409475465),
                     Vector(0.6652504230118443, 0.8047005076142132), Vector(0.6689898477157361, 0.813326565143824)),
            PathStep(PathOperation.curve4, Vector(0.6727343485617597, 0.8219526226734348),
                     Vector(0.6833485617597294, 0.8332250423011844), Vector(0.6885279187817258, 0.8435769881556683)),
            PathStep(PathOperation.curve4, Vector(0.6937089678510998, 0.8539272419627749),
                     Vector(0.6994500846023689, 0.8636548223350254), Vector(0.7000795262267343, 0.8754450084602368)),
            PathStep(PathOperation.curve4, Vector(0.7007072758037226, 0.8872351945854484),
                     Vector(0.6967800338409476, 0.9035380710659898), Vector(0.6922910321489002, 0.9143299492385787)),
            PathStep(PathOperation.curve4, Vector(0.6878003384094755, 0.9251218274111677),
                     Vector(0.6801962774957698, 0.9354720812182742), Vector(0.6731455160744501, 0.9402081218274112)),
            PathStep(PathOperation.curve4, Vector(0.6660947546531304, 0.9449424703891709),
                     Vector(0.6525228426395938, 0.9520016920473774), Vector(0.6377394247038917, 0.9561641285956008)),
            PathStep(PathOperation.curve4, Vector(0.6229560067681895, 0.960326565143824),
                     Vector(0.5993874788494078, 0.9576514382402707), Vector(0.5844450084602368, 0.9651912013536379)),
            PathStep(PathOperation.curve4, Vector(0.569502538071066, 0.9727309644670051),
                     Vector(0.5562030456852792, 0.9847038917089679), Vector(0.5480947546531303, 1.0014094754653131)),
            PathStep(PathOperation.curve4, Vector(0.5399864636209813, 1.0181150592216581),
                     Vector(0.5492013536379018, 1.05785448392555), Vector(0.5560676818950931, 1.0866666666666667)),
            PathStep(PathOperation.curve4, Vector(0.5629340101522843, 1.1154771573604063),
                     Vector(0.5795837563451777, 1.1451370558375635), Vector(0.5893062605752961, 1.1742707275803723)),
            PathStep(PathOperation.curve4, Vector(0.5990270727580372, 1.2034060913705582),
                     Vector(0.605746192893401, 1.2251692047377327), Vector(0.6051810490693739, 1.2419306260575296)),
            PathStep(PathOperation.curve4, Vector(0.6046159052453468, 1.258690355329949),
                     Vector(0.5960321489001692, 1.2678747884940778), Vector(0.585906937394247, 1.2748274111675126)),
            PathStep(PathOperation.curve4, Vector(0.5757817258883249, 1.2817800338409475),
                     Vector(0.5572470389170897, 1.286627749576988), Vector(0.5444247038917089, 1.2836395939086294)),
            PathStep(PathOperation.curve4, Vector(0.5316057529610828, 1.280653130287648),
                     Vector(0.5199560067681894, 1.2707563451776651), Vector(0.5089864636209813, 1.2569035532994925)),
            PathStep(PathOperation.curve4, Vector(0.49801522842639595, 1.2430490693739427),
                     Vector(0.48848223350253805, 1.2223062605752961), Vector(0.4785905245346869, 1.2005279187817257)),
            PathStep(PathOperation.curve4, Vector(0.4687005076142132, 1.1787495769881557),
                     Vector(0.4573045685279188, 1.1495346869712353), Vector(0.44965143824027076, 1.1262250423011844)),
            PathStep(PathOperation.curve4, Vector(0.4420016920473773, 1.1029153976311337),
                     Vector(0.43239932318104907, 1.0719137055837562), Vector(0.42127072758037226, 1.062901861252115)),
            PathStep(PathOperation.curve4, Vector(0.41014213197969546, 1.0538900169204737),
                     Vector(0.39289170896785114, 1.0589813874788494), Vector(0.3828764805414551, 1.0721590524534685)),
            PathStep(PathOperation.curve4, Vector(0.3728663282571912, 1.085336717428088),
                     Vector(0.3710406091370559, 1.1116971235194584), Vector(0.3611895093062606, 1.1419644670050764)),
            PathStep(PathOperation.curve4, Vector(0.3513401015228426, 1.172233502538071),
                     Vector(0.33657021996615905, 1.2276802030456853), Vector(0.3237698815566836, 1.2537648054145516)),
            PathStep(PathOperation.curve4, Vector(0.3109712351945854, 1.2798477157360406),
                     Vector(0.297994923857868, 1.2912538071065989), Vector(0.2843891708967851, 1.29846192893401)),
            PathStep(PathOperation.curve4, Vector(0.27078510998307953, 1.3056717428087987),
                     Vector(0.25161421319796956, 1.300243654822335), Vector(0.24213197969543152, 1.2970270727580373)),
            PathStep(PathOperation.curve4, Vector(0.23265313028764803, 1.2938121827411169),
                     Vector(0.22052961082910327, 1.2811218274111675), Vector(0.21558714043993227, 1.265357021996616)),
            PathStep(PathOperation.curve4, Vector(0.21064636209813878, 1.249590524534687),
                     Vector(0.21203045685279187, 1.233502538071066), Vector(0.21793908629441627, 1.2053299492385787)),
            PathStep(PathOperation.curve4, Vector(0.2238460236886633, 1.177155668358714),
                     Vector(0.24177834179357025, 1.1317394247038917), Vector(0.2510372250423012, 1.0963164128595602)),
            PathStep(PathOperation.curve4, Vector(0.2602961082910321, 1.0608934010152284),
                     Vector(0.2726802030456853, 1.0245093062605752), Vector(0.2734923857868021, 0.992786802030457)),
            PathStep(PathOperation.curve4, Vector(0.27430456852791874, 0.9610642978003384),
                     Vector(0.2537005076142132, 0.9262047377326564), Vector(0.23345346869712352, 0.8938984771573604)),
        ]

        path_step_dict = {
            'heart': path_list
        }
        return self._organ_path_step_generator(path_step_dict)


class Muscle(CompositeFigure):
    total_width = 1
    height_to_width_ratio = 6.858267716535433 / 2

    def __init__(
            self, face_color=None, scale=1, bottom_left_offset=None, base_z_order=0, z_order_increment=1, **kwargs):
        left_half_outer_vertices_array = np.array([
            [9.69314961e-01, 6.83826772e+00],
            [9.68724409e-01, 6.84118110e+00],
            [9.04692913e-01, 6.82181102e+00],
            [8.81669291e-01, 6.79385827e+00],
            [8.58653543e-01, 6.76590551e+00],
            [8.46354331e-01, 6.71826772e+00],
            [8.31204724e-01, 6.67039370e+00],
            [8.16062992e-01, 6.62251969e+00],
            [8.14944882e-01, 6.56700787e+00],
            [7.90803150e-01, 6.50669291e+00],
            [7.66661417e-01, 6.44645669e+00],
            [7.60440945e-01, 6.39763780e+00],
            [7.07393701e-01, 6.28118110e+00],
            [6.54338583e-01, 6.16472441e+00],
            [5.46188976e-01, 5.97692913e+00],
            [4.72496063e-01, 5.80787402e+00],
            [3.98803150e-01, 5.63881890e+00],
            [3.27413386e-01, 5.46417323e+00],
            [2.65232283e-01, 5.26700787e+00],
            [2.03051969e-01, 5.06976378e+00],
            [1.40877165e-01, 4.86125984e+00],
            [9.94236220e-02, 4.62464567e+00],
            [5.79700787e-02, 4.38795276e+00],
            [2.80346457e-02, 4.11188976e+00],
            [1.65220472e-02, 3.84708661e+00],
            [5.00944882e-03, 3.58220472e+00],
            [1.65220472e-02, 3.28078740e+00],
            [3.03377953e-02, 3.03566929e+00],
            [4.41535433e-02, 2.79055118e+00],
            [6.25771654e-02, 2.60464567e+00],
            [9.94236220e-02, 2.37645669e+00],
            [1.36270079e-01, 2.14818898e+00],
            [1.82859055e-01, 1.89614173e+00],
            [2.51416535e-01, 1.66645669e+00],
            [3.19974016e-01, 1.43677165e+00],
            [4.35448819e-01, 1.16724409e+00],
            [5.10779528e-01, 9.98267717e-01],
            [5.86118110e-01, 8.29212598e-01],
            [6.56952756e-01, 7.49448819e-01],
            [7.03417323e-01, 6.52283465e-01],
            [7.49897638e-01, 5.55118110e-01],
            [7.66527559e-01, 4.81023622e-01],
            [7.89598425e-01, 4.15196850e-01],
            [8.12677165e-01, 3.49291339e-01],
            [8.23039370e-01, 3.14409449e-01],
            [8.41881890e-01, 2.57086614e-01],
            [8.60724409e-01, 1.99685039e-01],
            [8.78251969e-01, 1.11968504e-01],
            [9.02637795e-01, 7.11811024e-02],
            [9.27015748e-01, 3.03149606e-02],
            [9.87425197e-01, 9.29133858e-03],
            [9.88188976e-01, 1.20472441e-02],
        ])
        single_inner_1_vertices_array = np.array([
            [0.89891339, 6.24897638],
            [0.89171654, 6.23748031],
            [0.9065748, 6.36070866],
            [0.89601575, 6.37629921],
            [0.88545669, 6.39188976],
            [0.85010236, 6.37291339],
            [0.83554331, 6.34244094],
            [0.82099213, 6.31204724],
            [0.82307874, 6.31291339],
            [0.80194488, 6.22740157],
            [0.78081102, 6.14188976],
            [0.74444094, 5.95779528],
            [0.70200787, 5.79559055],
            [0.6595748, 5.63338583],
            [0.59375591, 5.4515748],
            [0.5473622, 5.25425197],
            [0.50096063, 5.05685039],
            [0.45456693, 4.84818898],
            [0.4236378, 4.61133858],
            [0.39270866, 4.37448819],
            [0.37037008, 4.09818898],
            [0.36177953, 3.83314961],
            [0.35318898, 3.56811024],
            [0.36177953, 3.26637795],
            [0.37209449, 3.02110236],
            [0.38240157, 2.77582677],
            [0.39614961, 2.58968504],
            [0.4236378, 2.36133858],
            [0.45113386, 2.13291339],
            [0.48589764, 1.88070866],
            [0.53704724, 1.6507874],
            [0.58820472, 1.42086614],
            [0.68194488, 1.14551181],
            [0.7305748, 0.98204724],
            [0.77920472, 0.81850394],
            [0.80685039, 0.73968504],
            [0.82882677, 0.6696063],
            [0.85079528, 0.59952756],
            [0.8545748, 0.57173228],
            [0.86240945, 0.5615748],
            [0.87025197, 0.55149606],
            [0.88817323, 0.53338583],
            [0.89601575, 0.54133858],
            [0.90385827, 0.5492126],
            [0.90385039, 0.59771654],
            [0.90944882, 0.6015748],
        ])
        single_inner_2_vertices_array = np.array([
            [0.89891339, 6.24897638],
            [0.89640157, 6.09866142],
            [0.89770079, 5.96259843],
            [0.88913386, 5.79566929],
            [0.88055906, 5.62874016],
            [0.86101575, 5.45165354],
            [0.8485748, 5.25425197],
            [0.83614173, 5.05685039],
            [0.82640157, 4.84811024],
            [0.81451181, 4.61125984],
            [0.80261417, 4.37440945],
            [0.78240945, 4.0980315],
            [0.77722835, 3.83299213],
            [0.77205512, 3.56787402],
            [0.78050394, 3.26614173],
            [0.78344094, 3.0207874],
            [0.78637795, 2.77543307],
            [0.78559843, 2.58818898],
            [0.79484252, 2.36094488],
            [0.80408661, 2.13362205],
            [0.82207874, 1.88362205],
            [0.83889764, 1.65708661],
            [0.85570866, 1.43055118],
            [0.88398425, 1.1788189],
            [0.89574803, 1.00173228],
            [0.90750394, 0.82464567],
            [0.90880315, 0.7323622],
            [0.90944882, 0.6015748],
        ])

        width_offset = np.array([[2 * self.total_width, 0]])
        height_normalize = np.array([[0.5, 0.5]])

        single_inner_vertex_array = np.vstack([
            single_inner_1_vertices_array,
            np.flip(single_inner_2_vertices_array[:-1], axis=0)
        ])
        left_single_inner_vertex_array = single_inner_vertex_array * height_normalize
        right_single_inner_vertex_array = (single_inner_vertex_array * np.array([[-1, 1]]) + width_offset) * height_normalize

        right_outer_vertices_array = left_half_outer_vertices_array * np.array([[-1, 1]]) + width_offset
        inverted_right_vertices_array = np.flip(right_outer_vertices_array[:-1], axis=0)
        complete_outer_vertices_array = np.vstack([left_half_outer_vertices_array, inverted_right_vertices_array]) * height_normalize
        assert complete_outer_vertices_array.shape[0] % 3 == 1
        outer_step_num = complete_outer_vertices_array.shape[0] // 3
        outer_path_list = [PathStep(PathOperation.moveto, Vector(array=complete_outer_vertices_array[0]))]
        for step_index in range(outer_step_num):
            outer_path_list.append(PathStep(
                PathOperation.curve4,
                complete_outer_vertices_array[step_index * 3 + 1],
                complete_outer_vertices_array[step_index * 3 + 2],
                complete_outer_vertices_array[step_index * 3 + 3]))
        outer_path_list.append(PathStep(PathOperation.closepoly))

        assert left_single_inner_vertex_array.shape[0] % 3 == 1
        left_single_inner_path_list = [PathStep(PathOperation.moveto, Vector(array=left_single_inner_vertex_array[0]))]
        for step_index in range(left_single_inner_vertex_array.shape[0] // 3):
            left_single_inner_path_list.append(PathStep(
                PathOperation.curve4,
                left_single_inner_vertex_array[step_index * 3 + 1],
                left_single_inner_vertex_array[step_index * 3 + 2],
                left_single_inner_vertex_array[step_index * 3 + 3]))
        left_single_inner_path_list.append(PathStep(PathOperation.closepoly))

        assert right_single_inner_vertex_array.shape[0] % 3 == 1
        right_single_inner_path_list = [PathStep(PathOperation.moveto, Vector(array=right_single_inner_vertex_array[0]))]
        for step_index in range(right_single_inner_vertex_array.shape[0] // 3):
            right_single_inner_path_list.append(PathStep(
                PathOperation.curve4,
                right_single_inner_vertex_array[step_index * 3 + 1],
                right_single_inner_vertex_array[step_index * 3 + 2],
                right_single_inner_vertex_array[step_index * 3 + 3]))
        right_single_inner_path_list.append(PathStep(PathOperation.closepoly))
        if face_color is None:
            outer_face_color = inner_face_color = None
        else:
            outer_face_color, inner_face_color = face_color

        path_list_dict = {
            'outer': outer_path_list,
            'left_inner': left_single_inner_path_list,
            'right_inner': right_single_inner_path_list,
        }
        common_config_dict = {
            ParameterName.scale: 1,
            ParameterName.bottom_left_offset: Vector(0, 0),
            ParameterName.z_order_increment: 1,
            **kwargs,
        }
        specific_config_dict = {
            'outer': {
                ParameterName.face_color: outer_face_color,
                ParameterName.base_z_order: 0,
            },
            'left_inner': {
                ParameterName.face_color: inner_face_color,
                ParameterName.base_z_order: 0.001,
            },
            'right_inner': {
                ParameterName.face_color: inner_face_color,
                ParameterName.base_z_order: 0.001,
            },
        }
        muscle_dict = {
            'muscle': {
                key:
                PathShape(**{
                    **common_config_dict,
                    **specific_config_dict[key],
                    ParameterName.name: key,
                    ParameterName.path_step_list: path_list,
                }) for key, path_list in path_list_dict.items()
            }
        }
        super().__init__(
            muscle_dict, bottom_left=Vector(0, 0), size=Vector(1, self.height_to_width_ratio) * self.total_width,
            scale=scale, bottom_left_offset=bottom_left_offset, base_z_order=base_z_order,
            z_order_increment=z_order_increment)


class Intestine(Organ):
    total_width = 1
    input_x_loc = 0.6
    output_x_loc = 0.45
    input_output_height = 0.15
    layer_num = 4
    layer_distance = 0.2
    half_layer_distance = layer_distance / 2
    layer_height = 0.16
    half_layer_height = layer_height / 2
    inner_round_radius = half_layer_distance - half_layer_height
    outer_round_radius = 0.1
    input_output_radius = min(outer_round_radius, half_layer_height)
    height_to_width_ratio = 2 * input_output_height + layer_num * layer_distance + layer_height
    inner_turn_region_center_len = half_layer_distance
    outer_turn_region_center_len = half_layer_height - outer_round_radius
    left_vertical_x_loc = half_layer_height
    right_vertical_x_loc = total_width - half_layer_height

    left_to_right = 0
    right_to_left = 1
    vertical = 2

    """
    turn code:
    0: ->-
         |
    
    1:   |
       -<-
    
    2: |
       ->-
    
    3: -<-
       |
    """

    circle_degree_90_list = [
        [90, 0],
        [0, -90],
        [-180, -90],
        [90, 180],
    ]
    circle_degree_180_list = [
        [90, -90],
        [-90, -270],
    ]

    @property
    def inner_line_end_offset_list(self):
        inner_turn_region_center_len = self.inner_turn_region_center_len
        half_layer_height = self.half_layer_height
        return [
            Vector(-inner_turn_region_center_len, -half_layer_height),
            Vector(-half_layer_height, inner_turn_region_center_len),
            Vector(half_layer_height, inner_turn_region_center_len),
            Vector(inner_turn_region_center_len, -half_layer_height),
        ]

    @property
    def inner_line_start_offset_list(self):
        inner_turn_region_center_len = self.inner_turn_region_center_len
        half_layer_height = self.half_layer_height
        return [
            Vector(-half_layer_height, -inner_turn_region_center_len),
            Vector(-inner_turn_region_center_len, half_layer_height),
            Vector(inner_turn_region_center_len, half_layer_height),
            Vector(half_layer_height, -inner_turn_region_center_len),
        ]

    @property
    def inner_center_offset_list(self):
        inner_turn_region_center_len = self.inner_turn_region_center_len
        return [
            Vector(-inner_turn_region_center_len, -inner_turn_region_center_len),
            Vector(-inner_turn_region_center_len, inner_turn_region_center_len),
            Vector(inner_turn_region_center_len, inner_turn_region_center_len),
            Vector(inner_turn_region_center_len, -inner_turn_region_center_len),
        ]

    @property
    def outer_line_end_offset_list(self):
        half_layer_height = self.half_layer_height
        outer_turn_region_center_len = self.outer_turn_region_center_len
        return [
            Vector(outer_turn_region_center_len, half_layer_height),
            Vector(half_layer_height, -outer_turn_region_center_len),
            Vector(-half_layer_height, -outer_turn_region_center_len),
            Vector(-outer_turn_region_center_len, half_layer_height),
        ]

    @property
    def outer_line_start_offset_list(self):
        half_layer_height = self.half_layer_height
        outer_turn_region_center_len = self.outer_turn_region_center_len
        return [
            Vector(half_layer_height, outer_turn_region_center_len),
            Vector(outer_turn_region_center_len, -half_layer_height),
            Vector(-outer_turn_region_center_len, -half_layer_height),
            Vector(-half_layer_height, outer_turn_region_center_len),
        ]

    @property
    def outer_center_offset_list(self):
        outer_turn_region_center_len = self.outer_turn_region_center_len
        return [
            Vector(outer_turn_region_center_len, outer_turn_region_center_len),
            Vector(outer_turn_region_center_len, -outer_turn_region_center_len),
            Vector(-outer_turn_region_center_len, -outer_turn_region_center_len),
            Vector(-outer_turn_region_center_len, outer_turn_region_center_len),
        ]

    def _calculate_inner_end_start_center_point(self, center_point, turn_degree_code):
        return (
            center_point + self.inner_line_end_offset_list[turn_degree_code],
            center_point + self.inner_line_start_offset_list[turn_degree_code],
            center_point + self.inner_center_offset_list[turn_degree_code],
        )

    def _calculate_outer_end_start_center_point(self, center_point, turn_degree_code):
        return (
            center_point + self.outer_line_end_offset_list[turn_degree_code],
            center_point + self.outer_line_start_offset_list[turn_degree_code],
            center_point + self.outer_center_offset_list[turn_degree_code],
        )

    def _construct_complete_turn(self, turn_center_point, turn_code, forward_path_list, backward_path_list):
        (
            turn_inner_end_point, turn_inner_start_point, turn_inner_center_point
        ) = self._calculate_inner_end_start_center_point(turn_center_point, turn_code)
        (
            turn_outer_end_point, turn_outer_start_point, turn_outer_center_point
        ) = self._calculate_outer_end_start_center_point(turn_center_point, turn_code)
        if turn_code in {0, 1}:
            forward_path_list.extend([
                PathStep(PathOperation.lineto, turn_outer_end_point),
                *ellipse_arc_obj.generator(
                    turn_outer_center_point, *self.circle_degree_90_list[turn_code], self.outer_round_radius),
            ])
            backward_path_list[:0] = [
                PathStep(PathOperation.lineto, turn_inner_start_point),
                *ellipse_arc_obj.generator(
                    turn_inner_center_point, *reversed(self.circle_degree_90_list[turn_code]), self.inner_round_radius),
            ]
        elif turn_code in {2, 3}:
            forward_path_list.extend([
                PathStep(PathOperation.lineto, turn_inner_end_point),
                *ellipse_arc_obj.generator(
                    turn_inner_center_point, *self.circle_degree_90_list[turn_code], self.inner_round_radius),
            ])
            backward_path_list[:0] = [
                PathStep(PathOperation.lineto, turn_outer_start_point),
                *ellipse_arc_obj.generator(
                    turn_outer_center_point, *reversed(self.circle_degree_90_list[turn_code]), self.outer_round_radius),
            ]
        else:
            raise ValueError()

    def path_step_generator(self):
        """
                    / start->-\
                    |         |
                    ^         |
                    |         \
                    |          ------>----\
                    \                      \
                     \                      |
                      \                     |
                       ------<-----\        |
                                   /        |
            -------->-------->----          |
                                            |
                                           /
                                          /
            ----------<----------<--------
        """
        layer_distance = self.layer_distance
        half_layer_height = self.half_layer_height
        half_layer_distance = self.half_layer_distance
        total_height = self.height_to_width_ratio
        input_x_loc = self.input_x_loc
        output_x_loc = self.output_x_loc
        input_output_height = self.input_output_height
        circle_degree_90_list = self.circle_degree_90_list

        forward_path_list = []
        backward_path_list = []

        input_output_radius = self.input_output_radius
        input_output_turn_center_offset = half_layer_height - input_output_radius

        start_center_point = Vector(input_x_loc, total_height - half_layer_height)
        start_left_turn_center = start_center_point + Vector(-1, 1) * input_output_turn_center_offset
        start_point = start_left_turn_center + Vector(0, input_output_radius)
        start_right_turn_center = start_center_point + input_output_turn_center_offset
        start_right_before_turn_point = start_right_turn_center + Vector(0, input_output_radius)

        forward_path_list.extend([
            PathStep(PathOperation.moveto, start_point),
            PathStep(PathOperation.lineto, start_right_before_turn_point),
            *ellipse_arc_obj.generator(
                start_right_turn_center, *circle_degree_90_list[0], input_output_radius),
        ])
        backward_path_list.extend([
            *ellipse_arc_obj.generator(
                start_left_turn_center, *reversed(circle_degree_90_list[3]), input_output_radius),
            PathStep(PathOperation.lineto, start_point),
            PathStep(PathOperation.closepoly),
        ])
        first_turn_center_point = Vector(input_x_loc, total_height - half_layer_height - input_output_height)
        self._construct_complete_turn(
            first_turn_center_point, 2, forward_path_list, backward_path_list)
        for u_turn_index in range(self.layer_num):
            u_turn_right = u_turn_index % 2 == 0
            current_upper_y_loc = total_height - half_layer_height - input_output_height - layer_distance * u_turn_index
            if u_turn_right:
                current_x_loc = self.right_vertical_x_loc
                upper_turn_code = 0
                lower_turn_code = 1
            else:
                current_x_loc = self.left_vertical_x_loc
                upper_turn_code = 3
                lower_turn_code = 2
            current_u_turn_upper_center_point = Vector(current_x_loc, current_upper_y_loc)
            current_u_turn_lower_center_point = Vector(current_x_loc, current_upper_y_loc - layer_distance)
            self._construct_complete_turn(
                current_u_turn_upper_center_point, upper_turn_code, forward_path_list, backward_path_list)
            self._construct_complete_turn(
                current_u_turn_lower_center_point, lower_turn_code, forward_path_list, backward_path_list)
        last_turn_center_point = Vector(output_x_loc, input_output_height + half_layer_height)
        self._construct_complete_turn(
            last_turn_center_point, 0, forward_path_list, backward_path_list)

        end_center_point = Vector(output_x_loc, half_layer_height)
        end_left_turn_center = end_center_point + Vector(-1, -1) * input_output_turn_center_offset
        end_right_turn_center = end_center_point + Vector(1, -1) * input_output_turn_center_offset
        end_right_before_turn_point = end_right_turn_center + Vector(input_output_radius, 0)
        end_left_before_turn_point = end_left_turn_center + Vector(0, -input_output_radius)
        forward_path_list.extend([
            PathStep(PathOperation.lineto, end_right_before_turn_point),
            *ellipse_arc_obj.generator(
                end_right_turn_center, *circle_degree_90_list[1], input_output_radius),
            PathStep(PathOperation.lineto, end_left_before_turn_point),
            *ellipse_arc_obj.generator(
                end_left_turn_center, *reversed(circle_degree_90_list[2]), input_output_radius),
        ])
        forward_path_list.extend(backward_path_list)

        return forward_path_list


class Adipose(Organ):
    total_width = 1
    height_to_width_ratio = 0.62

    radius = 0.072

    surrounding_circle_center_list = [
        Vector(0.1, 0.2),
        Vector(0.2, 0.17),
        Vector(0.3, 0.14),
        Vector(0.4, 0.18),
        Vector(0.5, 0.18),
        Vector(0.6, 0.22),
        Vector(0.69, 0.2),
        Vector(0.79, 0.2),
        Vector(0.91, 0.2),
        Vector(0.85, 0.27),
        Vector(0.75, 0.36),
        Vector(0.64, 0.42),
        Vector(0.55, 0.45),
        Vector(0.44, 0.41),
        Vector(0.35, 0.35),
        Vector(0.26, 0.30),
        Vector(0.17, 0.27),
        Vector(0.12, 0.23),
    ]

    def __init__(self, vessel=False, **kwargs):
        self.vessel = vessel
        super().__init__(**kwargs)

    def path_step_generator(self):
        complete_path_list = []
        radius = self.radius
        last_circle_center = self.surrounding_circle_center_list[-1]
        last_start_theta = None
        last_circle_end_theta = None
        add_360 = False
        for current_circle_center in self.surrounding_circle_center_list:
            (
                _, _, last_end_theta, current_start_theta
            ) = calculate_intersect_angle_between_ellipse(
                last_circle_center, radius, radius, current_circle_center, radius, radius)
            if last_start_theta is None:
                complete_path_list.append(PathStep(
                    PathOperation.moveto,
                    convert_theta_to_coordinate(current_start_theta, current_circle_center, radius),))
                last_circle_end_theta = last_end_theta
                # current_start_theta = current_end_theta_2
            else:
                # if add_360:
                #     last_end_theta += 360
                #     current_start_theta += 360
                while last_end_theta < last_start_theta:
                    last_start_theta -= 360
                complete_path_list.extend(ellipse_arc_obj.generator(
                    last_circle_center, last_start_theta, last_end_theta, radius))
                # if current_circle_center.x < last_circle_center.x:
                #     add_360 = True
                # else:
                #     add_360 = False
            last_circle_center = current_circle_center
            last_start_theta = current_start_theta
        # if add_360:
        #     last_end_theta += 360
        complete_path_list.extend(ellipse_arc_obj.generator(
            last_circle_center, last_start_theta, last_circle_end_theta + 360, radius), )
        complete_path_list.append(PathStep(PathOperation.closepoly))
        return complete_path_list


class OrganMouse(Organ):
    total_width = 1
    height_to_width_ratio = 2

    body_half_height = 1.4
    body_half_width = 0.8
    body_center_y_loc = body_half_height + 0.05

    leg_half_height = 0.7
    leg_half_width = 0.3
    leg_center_loc = Vector(body_half_width - 0.15, body_center_y_loc - body_half_height + leg_half_height + 0.06)

    head_half_width = 0.3
    head_half_height = 0.5
    head_center_y_loc = body_center_y_loc + body_half_height + head_half_height / 2 - 0.02

    ear_radius = 0.23
    ear_center_loc = Vector(head_half_width + ear_radius - 0.2, head_center_y_loc - 0.05)

    def __init__(self, vessel=False, **kwargs):
        self.vessel = vessel
        super().__init__(**kwargs)

    def path_step_generator(self):
        half_head_center = Vector(0, self.head_center_y_loc)
        half_ear_center = self.ear_center_loc
        half_body_center = Vector(0, self.body_center_y_loc)
        half_leg_center = self.leg_center_loc

        head_half_width = self.head_half_width / 2
        head_half_height = self.head_half_height / 2
        ear_radius = self.ear_radius / 2
        body_half_width = self.body_half_width / 2
        body_half_height = self.body_half_height / 2
        leg_half_width = self.leg_half_width / 2
        leg_half_height = self.leg_half_height / 2

        width_offset = Vector(self.total_width, 0)
        head_center = (half_head_center + width_offset) / 2
        right_ear_center = (half_ear_center + width_offset) / 2
        left_ear_center = (half_ear_center * Vector(-1, 1) + width_offset) / 2
        body_center = (half_body_center + width_offset) / 2
        right_leg_center = (half_leg_center + width_offset) / 2
        left_leg_center = (half_leg_center * Vector(-1, 1) + width_offset) / 2

        head_1_end_theta, ear_start_theta, head_2_start_theta, ear_end_theta = calculate_intersect_angle_between_ellipse(
            head_center, head_half_width, head_half_height,
            right_ear_center, ear_radius)
        head_2_end_theta, body_1_start_theta, _, _ = calculate_intersect_angle_between_ellipse(
            head_center, head_half_width, head_half_height,
            body_center, body_half_width, body_half_height)
        body_1_end_theta, leg_start_theta, body_2_start_theta, leg_end_theta = calculate_intersect_angle_between_ellipse(
            body_center, body_half_width, body_half_height,
            right_leg_center, leg_half_width, leg_half_height)

        head_start_theta = 180 - head_1_end_theta
        head_width_pair = Vector(head_half_width, head_half_height)
        head_start_point = convert_theta_to_coordinate(head_start_theta, head_center, head_width_pair)
        complete_path_list = [
            PathStep(PathOperation.moveto, head_start_point),
            *ellipse_arc_obj.generator(
                head_center, head_start_theta, head_1_end_theta, head_half_width, head_half_height),
            *ellipse_arc_obj.generator(
                right_ear_center, ear_start_theta, ear_end_theta, ear_radius),
            *ellipse_arc_obj.generator(
                head_center, head_2_start_theta, head_2_end_theta, head_half_width, head_half_height),
            *ellipse_arc_obj.generator(
                body_center, body_1_start_theta, body_1_end_theta, body_half_width, body_half_height),
            *ellipse_arc_obj.generator(
                right_leg_center, leg_start_theta, leg_end_theta, leg_half_width, leg_half_height),
            *ellipse_arc_obj.generator(
                body_center, body_2_start_theta, -body_2_start_theta - 180, body_half_width, body_half_height),
            *ellipse_arc_obj.generator(
                left_leg_center, -180 - leg_end_theta, -leg_start_theta - 180, leg_half_width, leg_half_height),
            *ellipse_arc_obj.generator(
                body_center, 180 - body_1_end_theta, 180 - body_1_start_theta, body_half_width, body_half_height),
            *ellipse_arc_obj.generator(
                head_center, 180 - head_2_end_theta, 180 - head_2_start_theta, head_half_width, head_half_height),
            *ellipse_arc_obj.generator(
                left_ear_center, -ear_end_theta - 180, -ear_start_theta - 180, ear_radius),
            PathStep(PathOperation.lineto, head_start_point),
            PathStep(PathOperation.closepoly),
        ]
        return complete_path_list


class CircleVessel(Organ):
    total_width = 1
    height_to_width_ratio = 2

    center_x_loc = total_width / 2
    center_loc = Vector(center_x_loc, 1.2)
    inner_round_radius = 0.06
    half_layer_height = 0.04
    side_x_distance = 0.24
    top_y_loc = 1.6
    bottom_y_loc = 0.25
    side_degree = 60

    @property
    def top_round_radius(self):
        return min(self.half_layer_height, self.inner_round_radius)

    @property
    def side_y_distance(self):
        return self.side_x_distance * np.tan(np.deg2rad(self.side_degree))

    @property
    def right_side_angle_pair(self):
        outer_angle_pair = [180 - self.side_degree, -90]
        inner_angle_pair = [0, self.side_degree]
        return outer_angle_pair, inner_angle_pair

    @property
    def left_side_angle_pair(self):
        outer_angle_pair = [270, self.side_degree]
        inner_angle_pair = [self.side_degree, 180]
        return outer_angle_pair, inner_angle_pair

    def path_step_generator(self):
        half_vessel_width = self.half_layer_height
        round_radius = self.inner_round_radius
        top_round_radius = self.top_round_radius
        vessel_width_radius_diff = half_vessel_width - round_radius
        vessel_width_radius_sum = half_vessel_width + round_radius
        top_center_point = Vector(self.center_x_loc, self.top_y_loc)
        center_x_loc = self.center_x_loc
        center_point = self.center_loc
        side_x_distance = self.side_x_distance
        side_y_distance = self.side_y_distance
        bottom_y_loc = self.bottom_y_loc
        sqrt_3 = np.sqrt(3)

        top_vessel_width_radius_diff = half_vessel_width - top_round_radius
        top_left_center = top_center_point + Vector(-top_vessel_width_radius_diff, top_vessel_width_radius_diff)
        top_right_center = top_center_point + Vector(top_vessel_width_radius_diff, top_vessel_width_radius_diff)
        outer_start_point = top_left_center + Vector(0, top_round_radius)
        top_left_turn_before_point = top_left_center + Vector(-top_round_radius, 0)
        first_turn_before_point = top_right_center + Vector(0, top_round_radius)

        outer_center_plus_turn_x_offset = half_vessel_width + round_radius
        outer_center_plus_turn_y_offset = outer_center_plus_turn_x_offset / sqrt_3
        outer_center_minus_turn_x_offset = half_vessel_width - round_radius
        outer_center_minus_turn_y_offset = outer_center_minus_turn_x_offset / sqrt_3
        center_right_before_turn_point = center_point + Vector(half_vessel_width, outer_center_plus_turn_y_offset)
        center_right_turn_center = center_point + Vector(outer_center_plus_turn_x_offset, outer_center_plus_turn_y_offset)
        center_left_turn_center = center_point + Vector(-outer_center_plus_turn_x_offset, outer_center_plus_turn_y_offset)
        center_left_before_turn_point = convert_theta_to_coordinate(-30, center_left_turn_center, round_radius)

        inside_start_center = center_point + Vector(
            0, -half_vessel_width * 2 - round_radius * 2)
        inside_start_arc_right_point = convert_theta_to_coordinate(30, inside_start_center, round_radius)

        right_side_center = center_point + Vector(side_x_distance, -side_y_distance)
        outer_right_side_turn_center = right_side_center + Vector(
            outer_center_minus_turn_x_offset, outer_center_minus_turn_y_offset)
        outer_right_side_before_turn_point = convert_theta_to_coordinate(
            30, outer_right_side_turn_center, round_radius)
        inner_right_side_turn_center = right_side_center + Vector(
            -outer_center_plus_turn_x_offset, -outer_center_plus_turn_y_offset)
        inner_right_side_before_turn_point = right_side_center + Vector(
            -half_vessel_width, -outer_center_plus_turn_y_offset)
        left_side_center = center_point + Vector(-side_x_distance, -side_y_distance)
        outer_left_side_turn_center = left_side_center + Vector(
            -outer_center_minus_turn_x_offset, outer_center_minus_turn_y_offset)
        outer_left_side_before_turn_point = left_side_center + Vector(
            -half_vessel_width, outer_center_minus_turn_y_offset)
        inner_left_side_turn_center = left_side_center + Vector(
            outer_center_plus_turn_x_offset, -outer_center_plus_turn_y_offset)
        inner_left_side_before_turn_point = convert_theta_to_coordinate(
            150, inner_left_side_turn_center, round_radius)

        right_bottom_side_center = Vector(center_x_loc + side_x_distance, bottom_y_loc)
        outer_right_bottom_side_turn_center = right_bottom_side_center + Vector(
            vessel_width_radius_diff, -vessel_width_radius_diff)
        outer_right_bottom_side_before_turn_point = right_bottom_side_center + Vector(
            half_vessel_width, -vessel_width_radius_diff)
        inner_right_bottom_side_turn_center = right_bottom_side_center + Vector(
            -vessel_width_radius_sum, vessel_width_radius_sum)
        inner_right_bottom_side_before_turn_point = right_bottom_side_center + Vector(
            -vessel_width_radius_sum, half_vessel_width)
        left_bottom_side_center = Vector(center_x_loc - side_x_distance, bottom_y_loc)
        outer_left_bottom_side_turn_center = left_bottom_side_center + Vector(
            -vessel_width_radius_diff, -vessel_width_radius_diff)
        outer_left_bottom_side_before_turn_point = left_bottom_side_center + Vector(
            -vessel_width_radius_diff, -half_vessel_width)
        inner_left_bottom_side_turn_center = left_bottom_side_center + Vector(
            vessel_width_radius_sum, vessel_width_radius_sum)
        inner_left_bottom_side_before_turn_point = left_bottom_side_center + Vector(
            half_vessel_width, vessel_width_radius_sum)

        outer_path = [
            PathStep(PathOperation.moveto, outer_start_point),
            PathStep(PathOperation.lineto, first_turn_before_point),
            *ellipse_arc_obj.generator(top_right_center, 90, 0, top_round_radius),
            PathStep(PathOperation.lineto, center_right_before_turn_point),
            *ellipse_arc_obj.generator(center_right_turn_center, -180, -150, round_radius),
            PathStep(PathOperation.lineto, outer_right_side_before_turn_point),
            *ellipse_arc_obj.generator(outer_right_side_turn_center, 120, 0, round_radius),
            PathStep(PathOperation.lineto, outer_right_bottom_side_before_turn_point),
            *ellipse_arc_obj.generator(outer_right_bottom_side_turn_center, 0, -90, round_radius),
            PathStep(PathOperation.lineto, outer_left_bottom_side_before_turn_point),
            *ellipse_arc_obj.generator(outer_left_bottom_side_turn_center, -90, -180, round_radius),
            PathStep(PathOperation.lineto, outer_left_side_before_turn_point),
            *ellipse_arc_obj.generator(outer_left_side_turn_center, 180, 150, round_radius),
            PathStep(PathOperation.lineto, center_left_before_turn_point),
            *ellipse_arc_obj.generator(center_left_turn_center, -30, 0, round_radius),
            PathStep(PathOperation.lineto, top_left_turn_before_point),
            *ellipse_arc_obj.generator(top_left_center, 180, 90, top_round_radius),
            PathStep(PathOperation.lineto, outer_start_point),
        ]
        inner_path = [
            PathStep(PathOperation.moveto, inside_start_arc_right_point),
            *ellipse_arc_obj.generator(inside_start_center, 30, 150, round_radius),
            PathStep(PathOperation.lineto, inner_left_side_before_turn_point),
            *ellipse_arc_obj.generator(inner_left_side_turn_center, 120, 180, round_radius),
            PathStep(PathOperation.lineto, inner_left_bottom_side_before_turn_point),
            *ellipse_arc_obj.generator(inner_left_bottom_side_turn_center, -180, -90, round_radius),
            PathStep(PathOperation.lineto, inner_right_bottom_side_before_turn_point),
            *ellipse_arc_obj.generator(inner_right_bottom_side_turn_center, -90, 0, round_radius),
            PathStep(PathOperation.lineto, inner_right_side_before_turn_point),
            *ellipse_arc_obj.generator(inner_right_side_turn_center, 0, 30, round_radius),
            PathStep(PathOperation.lineto, inside_start_arc_right_point),
            PathStep(PathOperation.closepoly),
        ]
        return outer_path + inner_path


class BranchVessel(CircleVessel):
    total_width = 1
    height_to_width_ratio = 2

    center_x_loc = total_width / 2
    center_loc = Vector(center_x_loc, 1.2)
    inner_round_radius = 0.06
    half_layer_height = 0.05
    side_x_distance = 0.21
    top_y_loc = 1.75
    bottom_y_loc = 0.26
    side_degree = 60

    def path_step_generator(self):
        half_vessel_width = self.half_layer_height
        round_radius = self.inner_round_radius
        top_round_radius = self.top_round_radius
        vessel_width_radius_diff = half_vessel_width - round_radius
        vessel_width_radius_sum = half_vessel_width + round_radius
        top_center_point = Vector(self.center_x_loc, self.top_y_loc)
        center_x_loc = self.center_x_loc
        center_point = self.center_loc
        side_x_distance = self.side_x_distance
        side_y_distance = self.side_y_distance
        bottom_y_loc = self.bottom_y_loc
        sqrt_3 = np.sqrt(3)

        top_vessel_width_radius_diff = half_vessel_width - top_round_radius
        top_left_center = top_center_point + Vector(-top_vessel_width_radius_diff, top_vessel_width_radius_diff)
        top_right_center = top_center_point + Vector(top_vessel_width_radius_diff, top_vessel_width_radius_diff)
        outer_start_point = top_left_center + Vector(0, top_round_radius)
        top_left_turn_before_point = top_left_center + Vector(-top_round_radius, 0)
        first_turn_before_point = top_right_center + Vector(0, top_round_radius)

        outer_center_plus_turn_x_offset = half_vessel_width + round_radius
        outer_center_plus_turn_y_offset = outer_center_plus_turn_x_offset / sqrt_3
        outer_center_minus_turn_x_offset = half_vessel_width - round_radius
        outer_center_minus_turn_y_offset = outer_center_minus_turn_x_offset / sqrt_3
        center_right_before_turn_point = center_point + Vector(half_vessel_width, outer_center_plus_turn_y_offset)
        center_right_turn_center = center_point + Vector(
            outer_center_plus_turn_x_offset, outer_center_plus_turn_y_offset)
        center_left_turn_center = center_point + Vector(
            -outer_center_plus_turn_x_offset, outer_center_plus_turn_y_offset)
        center_left_before_turn_point = convert_theta_to_coordinate(-30, center_left_turn_center, round_radius)

        inside_start_center = center_point + Vector(
            0, -half_vessel_width * 2 - round_radius * 2)
        inside_start_arc_right_point = convert_theta_to_coordinate(30, inside_start_center, round_radius)

        right_side_center = center_point + Vector(side_x_distance, -side_y_distance)
        outer_right_side_turn_center = right_side_center + Vector(
            outer_center_minus_turn_x_offset, outer_center_minus_turn_y_offset)
        outer_right_side_before_turn_point = convert_theta_to_coordinate(
            30, outer_right_side_turn_center, round_radius)
        inner_right_side_turn_center = right_side_center + Vector(
            -outer_center_plus_turn_x_offset, -outer_center_plus_turn_y_offset)
        inner_right_side_before_turn_point = right_side_center + Vector(
            -half_vessel_width, -outer_center_plus_turn_y_offset)
        left_side_center = center_point + Vector(-side_x_distance, -side_y_distance)
        outer_left_side_turn_center = left_side_center + Vector(
            -outer_center_minus_turn_x_offset, outer_center_minus_turn_y_offset)
        outer_left_side_before_turn_point = left_side_center + Vector(
            -half_vessel_width, outer_center_minus_turn_y_offset)
        inner_left_side_turn_center = left_side_center + Vector(
            outer_center_plus_turn_x_offset, -outer_center_plus_turn_y_offset)
        inner_left_side_before_turn_point = convert_theta_to_coordinate(
            150, inner_left_side_turn_center, round_radius)
        right_bottom_side_center = Vector(center_x_loc + side_x_distance, bottom_y_loc)
        outer_right_bottom_side_turn_center = right_bottom_side_center + Vector(
            top_vessel_width_radius_diff, -top_vessel_width_radius_diff)
        outer_right_bottom_side_before_turn_point = outer_right_bottom_side_turn_center + Vector(
            top_round_radius, 0)
        inner_right_bottom_side_turn_center = right_bottom_side_center + Vector(
            -top_vessel_width_radius_diff, -top_vessel_width_radius_diff)
        inner_right_bottom_side_before_turn_point = inner_right_bottom_side_turn_center + Vector(
            0, -top_round_radius)
        left_bottom_side_center = Vector(center_x_loc - side_x_distance, bottom_y_loc)
        inner_left_bottom_side_turn_center = left_bottom_side_center + Vector(
            top_vessel_width_radius_diff, -top_vessel_width_radius_diff)
        inner_left_bottom_side_before_turn_point = inner_left_bottom_side_turn_center + Vector(
            top_round_radius, 0)
        outer_left_bottom_side_turn_center = left_bottom_side_center + Vector(
            -top_vessel_width_radius_diff, -top_vessel_width_radius_diff)
        outer_left_bottom_side_before_turn_point = outer_left_bottom_side_turn_center + Vector(
            0, -top_round_radius)

        outer_path = [
            PathStep(PathOperation.moveto, outer_start_point),
            PathStep(PathOperation.lineto, first_turn_before_point),
            *ellipse_arc_obj.generator(top_right_center, 90, 0, top_round_radius),
            PathStep(PathOperation.lineto, center_right_before_turn_point),
            *ellipse_arc_obj.generator(center_right_turn_center, -180, -150, round_radius),
            PathStep(PathOperation.lineto, outer_right_side_before_turn_point),
            *ellipse_arc_obj.generator(outer_right_side_turn_center, 120, 0, round_radius),
            PathStep(PathOperation.lineto, outer_right_bottom_side_before_turn_point),
            *ellipse_arc_obj.generator(outer_right_bottom_side_turn_center, 0, -90, top_round_radius),
            PathStep(PathOperation.lineto, inner_right_bottom_side_before_turn_point),
            *ellipse_arc_obj.generator(inner_right_bottom_side_turn_center, -90, -180, top_round_radius),
            PathStep(PathOperation.lineto, inner_right_side_before_turn_point),
            *ellipse_arc_obj.generator(inner_right_side_turn_center, 0, 30, round_radius),
            PathStep(PathOperation.lineto, inside_start_arc_right_point),
            *ellipse_arc_obj.generator(inside_start_center, 30, 150, round_radius),
            PathStep(PathOperation.lineto, inner_left_side_before_turn_point),
            *ellipse_arc_obj.generator(inner_left_side_turn_center, 120, 180, round_radius),
            PathStep(PathOperation.lineto, inner_left_bottom_side_before_turn_point),
            *ellipse_arc_obj.generator(inner_left_bottom_side_turn_center, 0, -90, top_round_radius),
            PathStep(PathOperation.lineto, outer_left_bottom_side_before_turn_point),
            *ellipse_arc_obj.generator(outer_left_bottom_side_turn_center, -90, -180, top_round_radius),
            PathStep(PathOperation.lineto, outer_left_side_before_turn_point),
            *ellipse_arc_obj.generator(outer_left_side_turn_center, 180, 150, round_radius),
            PathStep(PathOperation.lineto, center_left_before_turn_point),
            *ellipse_arc_obj.generator(center_left_turn_center, -30, 0, round_radius),
            PathStep(PathOperation.lineto, top_left_turn_before_point),
            *ellipse_arc_obj.generator(top_left_center, 180, 90, top_round_radius),
            PathStep(PathOperation.lineto, outer_start_point),
            PathStep(PathOperation.closepoly),
        ]
        return outer_path
